
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }

# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Terraform'

on:
  push:
    branches: [ "ayushibansal119-patch-1" ]
  pull_request:
env: |
  TF_VAR_client_id=${{ secrets.SP_ID }}
  TF_VAR_client_secret=${{ secrets.SP_PASSWORD }}
  TF_VAR_tenant_id=${{ secrets.TENANT_ID }}
  TF_VAR_subscription_id=${{ secrets.SUBS_ID }}
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: dev

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
    - name: Azure CLI script
      uses: azure/CLI@v1
      with:
          azcliversion: 2.46.0
          inlineScript: |
           az login --service-principal -u ${{ secrets.SP_ID }} -p ${{ secrets.SP_PASSWORD }} --tenant ${{ secrets.Tenant_ID }}
           az account set -s ${{ secrets.SUBS_ID }}
           
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with: |
#         client_id = ${{ secrets.SP_ID }}
#         client_secret = ${{ secrets.SP_PASSWORD }}
#         tenant_id = ${{ secrets.TENANT_ID }}
#         subscription_id = ${{ secrets.SUBS_ID }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check
      
#     - name: Setup Terraform variables
#       working-directory: ./environments/dev/
#       id: vars
#       run: |-
#         cat > pipeline.auto.tfvars <<EOF
#         image_tag = "${{ github.sha }}"
#         EOF

    # Generates an execution plan for Terraform
    - name: Terraform Plan
#       env: |
#         TF_VAR_client_id = ${{ secrets.SP_ID }}
#         TF_VAR_client_secret = ${{ secrets.SP_PASSWORD }}
#         TF_VAR_tenant_id = ${{ secrets.TENANT_ID }}
#         TF_VAR_subscription_id = ${{ secrets.SUBS_ID }}
      run: terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
#       env: |
#         TF_VAR_client_id = ${{ secrets.SP_ID }}
#         TF_VAR_client_secret = ${{ secrets.SP_PASSWORD }}
#         TF_VAR_tenant_id = ${{ secrets.TENANT_ID }}
#         TF_VAR_subscription_id = ${{ secrets.SUBS_ID }}
      run: terraform apply -auto-approve -input=false
